jenkins tutorial:
-----------------
Agenda:
---------
	*Introduction to Jenkins
	*Jenkins configuration
	*Jenkins Hello world
	*Jenkins without pipeline script [configuration approach]
	*Jenkins  pipeline script introduction
	*Jenkins pipeline script spring boot + tomcat 
	*Jenkins pipeline script spring boot + docker deployment
	
killing and port on window machine:
----------------------------
open cmd as admin
netstat -ano | findstr :8080
taskkill /PID 2660 /F
	
	
What is Jenkins?
------------------
	Jenkins is an open-source automation server that 
	helps with the software development process by automating tasks like building, 
	testing, and deploying. 
	It's a popular tool for continuous integration (CI) and continuous delivery (CD)
	
How it works
	Jenkins can be triggered by code changes in repositories like GitHub, 
	Bitbucket, and GitLab. 
	It can then integrate with build tools like Maven and Gradle to automatically 
	build, test, and deploy code. 
	
What it does
	Jenkins can help increase developer productivity, ensure code quality, 
	and speed up the delivery of software updates. 
	
How it's built
	Jenkins is written in Java and was originally released in 2011
	as a fork of the Hudson project
	

Jenkins configuration
-------------------------
ref: https://www.blazemeter.com/blog/jenkins-war-file
	
run jenkins jar, changing port
-----------------------------
java -jar jenkins.war --httpPort=8090

1. login
2. install plugins
3. change admin password




hello world jenkins job:
-------------------------
	login --> create first job-->


public class Hello{
	public static void main(String args[]){
		System.out.println("hello to jenkins");
	}
}

cd C:\hellojava
javac Hello.java
java Hello



https://github.com/rgupta00/mvc2.git

add some plugin:
green ball
maven
deploy to container plugin

spring mvc maven github project :
------------------------------
step 1: create spring mvc maven hello world
step 2: put project on github

step 3: create an new jenkins project

springmvc ----->freestyle ---> give description
				(spring MVC hello world)

					|
				choose : github project ..provide link


				choose : SCM--> git
				provide Credentials ( create jenkins/admin)

					|
				Build trigger --> poll scm: * * * * *

					|
				Build Environment: Delete workspace before build starts

					|
				Invoke top-level Maven targets
				Choose build goals: clean compile test package




Tomcat Server Setup For Jenkins Deployment :
--------------------------------------------

step 1: donwload install tomcat zip
step 2: provide new user in tomcat-user.xml

<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<user username="admin" password="admin" roles="manager-gui,manager-script"/>


step 3: now we need to add tomcat plugin for jenkins

	click Manage Jenkins---> manage plugins--->search for  container

								|
							Deploy to container (name of container)
								|
						Installing Plugins/Upgrades
	Now restart jenkins



step 4: now from previous project

choose last option:

Post-build Actions

	mention war file location: target/mvc.war

	configure  Credentials	

	admin/****** (tomcat.admin)
 
 	and tomcat url




jenkins declerative pipeline:
---------------------------
https://medium.com/@venkatsatyanreddy_92646/beginners-guide-to-jenkins-pipelines-16a6181def97
https://www.jenkins.io/blog/2017/02/07/declarative-maven-project/


	demo-pipeline--> declarative pipeline

	Hello world Jenkins Declarative Pipeline:

	pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
    }
}

pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                bat "echo Hello World"
                bat 'echo "${BUILD_ID}"'
                echo 'Hello World'
            }
        }
    }
}

Example 2: pipeline hello world with multiple stages:
------------------------------------------------------
pipeline {
    agent any

    stages {
        stage('Git checkout') {
            steps {
                git 'https://github.com/rgupta00/mvc2.git'
            }
        }
		stage ('Compile Stage') {
		    steps {
		            bat 'mvn clean compile'
		    }
		}
		stage ('Testing Stage') {
		       bat 'mvn test' 
		    }
		}
		stage ('Deployment Stage') {
		    steps {
		            bat 'mvn deploy'
		    }
		}
    }
}

	

Example Spring boot mvc + tomcat + pipeline example:
--------------------------------------------------
step 1: add maven configuration in tools
	with name maven
	
step 2: SCM checkout [checkout:from version control tools]
	generate pipeline script
	
checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/rgupta00/empappcicd.git']])

Jenkinsfile
--------------
pipeline {
    agent any
    
    stages {
        
        stage('Git checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/rgupta00/mvc2.git']])
            }
        }
        stage('build project') {
            steps {
                bat "mvn -Dmaven.test.failure.ignore=true clean package"  
            }
            post { 
                success {
                    archiveArtifacts 'target/*.war'
                }
            }
        }
    }
}

Step 3: deploy war to the tomcat container
	generate pipeline script
--------------------------------------------------
pipeline {
    agent any
    
    stages {
        
        stage('Git checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/rgupta00/mvc2.git']])
            }
        }
        stage('build project') {
            steps {
                bat "mvn -Dmaven.test.failure.ignore=true clean package"  
            }
        }
        stage ('Deploy to tomcat server') {
             steps{
                 deploy adapters: [tomcat9(credentialsId: 'tomcat_server', path: '', url: 'http://localhost:8080/')], contextPath: null, war: '**/*.war'
             }
         }
         
    }
}



Step 4: deploy war to the tomcat container
	generate pipeline script with post build steps
--------------------------------------------------
pipeline {
    agent any
    
    stages {
        
        stage('Git checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/rgupta00/mvc2.git']])
            }
        }
        stage('build project') {
            steps {
                bat "mvn -Dmaven.test.failure.ignore=true clean package"  
            }
			 post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    archiveArtifacts 'target/*.war'
                }
            }
        }
        stage ('Deploy to tomcat server') {
             steps{
                 deploy adapters: [tomcat9(credentialsId: 'tomcat_server', path: '', url: 'http://localhost:8080/')], contextPath: null, war: '**/*.war'
             }
         }
         
    }
}


Jenkins+ docker integration:
------------------------------
pipeline {
    agent any
    
    tools{
        maven "maven"
    }

    environment{
           APP_NAME = "empappcicd"
           RELEASE_NO= "1.0.0"
           DOCKER_USER= "rgupta00"
           IMAGE_NAME= "${DOCKER_USER}"+"/"+"${APP_NAME}"
           IMAGE_TAG= "${RELEASE_NO}-${BUILD_NUMBER}"
    }
    
    stages {
          stage("SCM checkout"){
            steps{
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/rgupta00/empappcicd.git']])
            }
        }

        stage("Build Process"){
            steps{
                script{
                    bat 'mvn clean install'
                }
            }
        }
        
        stage("Build Image"){
            steps{
                script{
                    bat 'docker build -t rgupta00/empappcicd:1.1 .'
                }
            }
        }
        stage("Deploy Image to Hub"){
            steps{
                withCredentials([string(credentialsId: 'mydp', variable: 'mydp')]) {
                         bat 'docker login -u rgupta00 -p ${mydp}'
                         bat 'docker push rgupta00/empappcicd:1.1'
                }
            }
        }
    }
}




Reference:
----------
https://howtodoinjava.com/devops/setup-jenkins-pipeline-for-spring-boot-app/




ubuntu: examples:
====================

Example:
--------
pipeline{
    agent any
    
    environment{
        PATH = "/opt/maven3/bin:$PATH"
    }
    stages{
        stage("Git Checkout"){
            steps{
                git credentialsId: 'github', url: 'https://github.com/rgupta00/mvc'
            }
        }
        stage("Maven Build"){
            steps{
                sh "mvn clean package"
                sh "mv target/*.war target/mvc.war"
            }
        }
       
        }
    }
}




Example :post build action
--------------------------
pipeline {
    agent any
	
    environment{
       	 PATH = "/opt/maven3/bin:$PATH"
    }
    stages {
        
        stage('Git checkout') {
            steps {
                git 'https://github.com/rgupta00/mvc2.git'
            }
        }
        stage('build project') {
            steps {
                bat "mvn -Dmaven.test.failure.ignore=true clean package"  
            }
            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
				      echo "Archiving the Artifacts"
                     junit '**/target/surefire-reports/TEST-*.xml'
                     archiveArtifacts 'target/*.war'
                }
            }
        }
        
    }
}


Example:



	pipeline {
	    agent any
	
	environment{
       	 PATH = "/opt/maven3/bin:$PATH"
    	}
	    stages {
		stage ('Compile Stage') {

		    steps {
		            sh 'mvn clean compile'
		        
		    }
		}

		stage ('Testing Stage') {
		            sh 'mvn test'
		        
		    }
		}


		stage ('Deployment Stage') {
		    steps {
		            sh 'mvn deploy'
		    }
		}
	    }
	}



Example deployment war file on tomcat
----------------------------------

pipeline{
    agent any
    
    environment{
        PATH = "/opt/maven3/bin:$PATH"
    }
    stages{
        stage("Git Checkout"){
            steps{
                git credentialsId: 'github', url: 'https://github.com/rgupta00/mvc'
            }
        }
        stage("Maven Build"){
            steps{
                sh "mvn clean package"
                sh "mv target/*.war target/mvc.war"
            }
        }
       
        }
    }
}



